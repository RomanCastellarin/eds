pred issensor [i:0..9] := e.strcmp(appname, "test1") /\ e.strcmp(type,"sensor") /\ e.getnum(id) = i
pred sensorhigh [i:0..9] := issensor_i /\ e.getnum(svalue.actual) > e.getnum(svalue.threshold)
pred isactuator [i:0..9] := e.strcmp(appname, "test1") /\ e.strcmp(type,"actuator") /\ e.getnum(id) = i

stream num sensorTS [i:0..9] := if issensor_i then e.getnum(timestamp)
stream num lastSensorTS [i:0..9] := if issensor_i then last sensorTS_i

stream num sensorHighTS [i:0..9] := if sensorhigh_i then e.getnum(timestamp)
stream num lastSensorHighTS [i:0..9] := if sensorhigh_i then last sensorHighTS_i
stream num actuatorTS [i:0..9] := if isactuator_i then e.getnum(timestamp)
stream num lastActuatorTS [i:0..9] := if isactuator_i then last actuatorTS_i
stream bool lastWasActuator [i:0..9] := lastSensorHighTS_i < lastActuatorTS_i
stream bool lastWasSensor [i:0..9] := lastActuatorTS_i < lastSensorHighTS_i

stream bool checkStatusAct [i:0..9] := if isactuator_i then lastWasSensor_i
stream bool checkStatusSens [i:0..9] := if sensorhigh_i then lastWasActuator_i
stream bool checkQuickResponse [i:0..9] := if isactuator_i then actuatorTS_i < lastSensorHighTS_i + 4
aggstream bool allCheckStatusAct := all checkStatusAct_i [i:0..9]
aggstream bool allCheckStatusSens := all checkStatusSens_i [i:0..9]
aggstream bool allCheckQuickResponse := all checkQuickResponse_i [i:0..9]

stream bool notTooOftenSensor [i:0..9] := sensorTS_i - lastSensorTS_i > 4
stream bool notTooSeldomSensor [i:0..9] := sensorTS_i - lastSensorTS_i < 6
aggstream bool allSensorsNotTooOften := all notTooOftenSensor_i [i:0..9]
aggstream bool allSensorsNotTooSeldom := all notTooSeldomSensor_i [i:0..9]

stream bool failure := ~(allSensorsNotTooOften /\ allSensorsNotTooSeldom /\ allCheckStatusAct /\ allCheckStatusSens /\ allCheckQuickResponse)

stream bool end := e.strcmp(ourmessage,"STOP_TEST")
stream num endTS := if end then e.getnum(timestamp)
stream bool endCorrect [i:0..9] := lastWasActuator_i /\ endTS - lastSensorTS_i < 6
aggstream bool allEndCorrect := all endCorrect_i [i:0..9]

trigger failure do emit `{"testCorrect": "false", "endingType": "shortcut"}` on #terminate
trigger end do emit `{"testCorrect": "%allEndCorrect"}` on #terminate
